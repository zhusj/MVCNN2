function res = branch12Project_backprop(input, net, res, opts)
[sz1,sz2,sz3,sz4] = size(input);
for j = 1:sz4/80
    for i =1:80
        index = i+(j-1)*80;
        x(:,:,:,1) = input(:,:,:,index);
        l = net.layers{i+17} ;
        if opts.weighted
        %%% weighted backprop
           dzdx30 = res(30).dist_v{j}(i)/mean(res(30).dist_v{j})*res(30).dzdx(:,:,:,j);
           [dzdx, res(i+17).dzdw{1}, res(i+17).dzdw{2}] = ...
                    vl_nnconv(x, l.weights{1}, l.weights{2}, ...
                            dzdx30, ...
                           'pad', l.pad, 'stride', l.stride, ...
                           'CuDNN') ;
        else              
        %%% average backprop
          [dzdx, res(i+17).dzdw{1}, res(i+17).dzdw{2}] = ...
                  vl_nnconv(x, l.weights{1}, l.weights{2}, ...
                             res(98).dzdx(:,:,:,j), ...
                            'pad', l.pad, 'stride', l.stride, ...
                            'CuDNN') ;
        end

        res(18).dzdx(:,:,:,index) = single(gather(dzdx));
    end
%     tmp = mean(out,4);
%     res(30).x(:,:,:,j) = tmp;    
end
res(18).dzdx = gpuArray(single(res(18).dzdx));
flag =1;
% 
%             [res(i).dzdx, res(i).dzdw{1}, res(i).dzdw{2}] = ...
%                 vl_nnconv(res(i).x, l.weights{1}, l.weights{2}, ...
%                           res(i+1).dzdx, ...
%                           'pad', l.pad, 'stride', l.stride, ...
%                           cudnn{:}) ;